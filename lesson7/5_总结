
# 单CPU下
业务函数和中断函数会存在并发访问同一资源
1. 对于简单资源(原型变量？)，可以把访问资源变成原子操作，使用带lock前缀的`addl subl incl decl`原子指令；
2. 对于复杂资源(复合类型变量)，可以把访问资源处业务函数关掉中断，保证此处是串行访问资源；需要解决嵌套问题，通过在关中断前使用pushfl、popl保存之前的中断状态，在下一次开启中断时恢复该状态；

# 多CPU下
除了每个CPU存在业务函数和中断函数并发问题，还存在不同CPU之间并发问题；
在保证单CPU使用同步的情况下，还需要保证多个CPU同步；
1. 简单资源的原子访问操作：个人理解是因为锁了总线，所以单个、多个CPU均适用；
2. 自旋锁：关键指令xchg，确保 read(if) & set 在多个CPU之间是原子的



从保护资源的大小由大到小排列：
1. 单变量资源（例如整型变量），可使用原子变量, CPU核数不影响。
2. 超过单变量数目的少量资源，此时操作数很多，寄存器就容不下了。
    1）对于单核CPU，因为单核CPU的任务调度也是通过中断发起的，在加上对普通中断函数的处理，直接关中断即可。
    2）对于多核CPU，引入自旋锁，同时要注意为了防止当前CPU中断嵌套拿锁造成死锁的情况，自旋锁需要关闭本地CPU中断。
3. 对于需要长时间等待处理完成的资源，为了避免忙等造成CPU资源的浪费，需要设计出一套既能安全的竞争又能尽可能释放CPU能力的机制，这就是信号量了。
   1）包含等待、互斥和唤醒等操作，当拿不到信号量时CPU可以做其他事情；
   2）信号量的操作同样需要用自旋锁（关中断）保证排他性；
   3）单核和多核CPU都适用。